name: Integration Test Chat bot
# Triggered use /itest comment from pr

on:
  workflow_dispatch:
    inputs:
      dispatch:
        type: string
        description: "Dispatch contains pr context that want to trigger integration test"
        required: true

jobs:
  component-info:
    runs-on: ubuntu-latest
    outputs:
      components_info: ${{ steps.filter_prebuilds_components.outputs.result }}
      comment_id: ${{ steps.post_workflow_run_comment.outputs.result }}
      extra_github_env: ${{ steps.escape_multiple_lines_test_inputs.outputs.result }}
    steps:
      - uses: actions/github-script@v6
        id: get_components
        with:
          script: |
            const dispatch = JSON.parse(`${{ github.event.inputs.dispatch }}`);
            core.info(`comment body ${dispatch.comment_body}`);

            const getPrebuilds = async (org, page, perPage) => {
              return await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: "container",
                package_name: "godwoken-prebuilds",
                org,
                page,
                per_page: perPage,
              });
            };

            const getPrebuildsByTag = async (org, tag) => {
              const pkgs = await getPrebuilds(org, 1, 100);
              for (const pkg of pkgs.data) {
                if (pkg.metadata.container.tags.find(pTag => pTag === tag || pTag.match(tag))) {
                  return pkg;
                }
              }
            };

            // Parse commentBody
            const prebuilds = {
              org: "godwokenrises",
              repo: "godwoken-docker-prebuilds",
              pattern: /prebuilds: (.*)/,
              packageType: "container",
              packageName: "godwoken-prebuilds",
              image: "ghcr.io/godwokenrises/godwoken-prebuilds",
              tags: ["^[v]?1"],
              sha: undefined,
              htmlUrl: undefined,
              manifest: {
                godwoken: {
                  pattern: /&quot;ref.component.godwoken-sha1&quot;: &quot;(.{40})&quot;/,
                  sha: undefined,
                },
                scripts: {
                  pattern: /&quot;ref.component.godwoken-scripts-sha1&quot;: &quot;(.{40})&quot;/,
                  sha: undefined,
                },
                polyjuice: {
                  pattern: /&quot;ref.component.godwoken-polyjuice-sha1&quot;: &quot;(.{40})&quot;/,
                  sha: undefined,
                },
              },
            };
            const components = {
              godwoken: {
                owner: "godwokenrises",
                repo: "godwoken",
                branch: "develop",
                pattern: /godwoken: (.*)/,
                commit: undefined,
                htmlUrl: undefined,
                branchOrCommit: undefined,
                usePrebuilds: undefined,
              },
              scripts: {
                owner: "godwokenrises",
                repo: "godwoken-scripts",
                branch: "master",
                pattern: /scripts: (.*)/,
                commit: undefined,
                htmlUrl: undefined,
                branchOrCommit: undefined,
                usePrebuilds: undefined,
              },
              polyjuice: {
                owner: "godwokenrises",
                repo: "godwoken-polyjuice",
                branch: "main",
                pattern: /polyjuice: (.*)/,
                commit: undefined,
                htmlUrl: undefined,
                branchOrCommit: undefined,
                usePrebuilds: undefined,
              },
              web3: {
                owner: "godwokenrises",
                repo: "godwoken-web3",
                branch: "main",
                pattern: /web3: (.*)/,
                commit: undefined,
                htmlUrl: undefined,
                branchOrCommit: undefined,
              },
              kicker: {
                owner: "RetricSu",
                repo: "godwoken-kicker",
                branch: "master",
                pattern: /kicker: (.*)/,
                commit: undefined,
                htmlUrl: undefined,
                branchOrCommit: undefined,
              },
              tests: {
                owner: "godwokenrises",
                repo: "godwoken-tests",
                branch: "develop",
                pattern: /tests: (.*)/,
                commit: undefined,
                htmlUrl: undefined,
                branchOrCommit: undefined,
              },
            };

            // Fetch pr commit
            const pr = (
              await github.rest.pulls.get({
                owner: dispatch.repo.owner,
                repo: dispatch.repo.repo,
                pull_number: dispatch.issue.number,
              })
            ).data.head;
            core.info(`${JSON.stringify(pr.ref)}`);
            core.info(`${JSON.stringify(pr.repo.name)}`);

            // Fetch prebuilds
            const matchPrebuilds = async () => {
              const match = prebuilds.pattern.exec(`${dispatch.comment_body}`);
              if (match) {
                return await getPrebuildsByTag(prebuilds.org, match[1]);
              } else {
                return await getPrebuildsByTag(prebuilds.org, prebuilds.tags[0]);
              }
            };
            const pkg = await matchPrebuilds();

            prebuilds.tags = pkg.metadata.container.tags;
            prebuilds.htmlUrl = pkg.html_url;
            prebuilds.sha = pkg.name;
            core.info(`pkg: ${JSON.stringify(pkg)}`);

            // Fetch prebuilds components commit;
            const packagePage = JSON.stringify(
              await github.request(`GET ${prebuilds.htmlUrl}`)
            );
            const manifestLabelsStart = packagePage.indexOf("&quot;labels&quot;:");
            const manifestLabelsEnd = packagePage.lastIndexOf("</pre>");
            const manifestLabelsContent = packagePage.substring(manifestLabelsStart, manifestLabelsEnd);
            for (const name in prebuilds.manifest) {
              const label = prebuilds.manifest[name];
              const match = label.pattern.exec(manifestLabelsContent);
              if (match) {
                label.sha = match[1];
              } else {
                console.log(`${manifestLabelsContent}`);
                throw `${name}-sha1 not found`;
              }
            }
            core.info(`${JSON.stringify(prebuilds)}`);

            for (const name in components) {
              const comp = components[name];

              // Ref from pr is priority
              if (pr.repo.name === comp.repo) {
                comp.branchOrCommit = pr.sha;
                continue;
              }

              const match = comp.pattern.exec(`${dispatch.comment_body}`);
              if (match) {
                comp.branchOrCommit = match[1];
              } else if (prebuilds.manifest[name]) {
                comp.branchOrCommit = prebuilds.manifest[name].sha;
                comp.usePrebuilds = true;
              } else {
                if (name === "web3") {
                  continue;
                }
                comp.branchOrCommit = comp.branch;
              }
            }
            core.info(JSON.stringify(components));

            // Fetch branch/commit sha and html url
            for (const name in components) {
              const comp = components[name];
              core.info(`fetch branch or commit ${name}`);

              if (comp.branchOrCommit === undefined) {
                core.info(`skip fetch component info ${name}`);
                continue;
              }

              try {
                // Try branch
                const resp = await github.rest.repos.getBranch({
                  owner: comp.owner,
                  repo: comp.repo,
                  branch: comp.branchOrCommit,
                });
                comp.commit = resp.data.commit.sha;
                comp.htmlUrl = resp.data.commit.html_url;
              } catch {
                core.info(`${comp.branchOrCommit} branch not found`);
              }

              try {
                if (comp.commit === undefined) {
                  // Try commit
                  const resp = await github.rest.git.getCommit({
                    owner: comp.owner,
                    repo: comp.repo,
                    commit_sha: comp.branchOrCommit,
                  });
                  comp.commit = resp.data.sha;
                  comp.htmlUrl = resp.data.html_url;
                }
              } catch {
                core.info(`${comp.branchOrCommit} full commit not found`);
              }

              try {
                if (comp.commit === undefined) {
                  // Try serach commits
                  const resp = await github.rest.repos.listCommits({
                    owner: comp.owner,
                    repo: comp.repo,
                    sha: comp.branchOrCommit,
                    per_page: 1,
                    page: 1,
                  });
                  if (resp.data[0].sha.startsWith(comp.branchOrCommit)) {
                    comp.commit = resp.data[0].sha;
                    comp.htmlUrl = resp.data[0].html_url;
                  } else {
                    throw `${comp.branchOrCommit} short sha commit not found`;
                  }
                }
              } catch {
                core.error(`${comp.branchOrCommit} short commit not found`);
              }

              if (comp.commit === undefined) {
                throw `${comp.branchOrCommit} not found`;
              }
            }
            core.info(JSON.stringify(components));
            return {prebuilds, components};

      - name: Generate gw-bot token
        id: generate_gw_bot_token
        uses: wow-actions/use-app-token@v1
        with:
          app_id: ${{ secrets.GW_BOT_APP_ID }}
          private_key: ${{ secrets.GW_BOT_PRIVATE_KEY }}

      - name: Post a comment about component information to PR
        id: post_workflow_run_comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_gw_bot_token.outputs.token }}
          script: |
            const components_info = JSON.parse(`${{ steps.get_components.outputs.result }}`);
            const prebuilds = components_info.prebuilds;
            const components = components_info.components;
            const dispatch = JSON.parse(`${{ github.event.inputs.dispatch }}`);

            const workflowRun = (await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: `${{ github.run_id }}`,
            })).data;
            core.info(`action html url: ${workflowRun.html_url}`)

            // Post integration test info
            let integrationTestInfo = `
            \### Running integration test

            Workflow Run Id: [${workflowRun.id}](${workflowRun.html_url})
              
            \### Components:

            - prebuilds: [${prebuilds.tags}](${prebuilds.htmlUrl})`;

            for (const name in components) {
              const comp = components[name];
              if (comp.commit === undefined) {
                continue;
              }
              let shortSha = comp.commit.substr(0, 7);
              if (comp.usePrebuilds) {
                shortSha = `prebuilds ${shortSha}`;
              }
              integrationTestInfo = `${integrationTestInfo}\n- ${name}: [${shortSha}](${comp.htmlUrl})`;
            }

            // Add manual trigger example
            integrationTestInfo = `${integrationTestInfo}
            \### Manually running integration test

            Post a comment contains
            \`\`\`
            /itest
            [prebuilds: tag]
            [godwoken: branch/ref]
            [scripts: branch/ref]
            [polyjuice: branch/ref]
            [web3: branch/ref]
            [kicker: branch/ref]
            [tests: branch/ref]
            \`\`\`

            Note: \`\`\`[]\`\`\` means optional, for example

            \`\`\`
            /itest
            prebuilds: dev-202203280240
            godwoken: develop
            scripts: 81676d9d53ffdf5bbaa60483928d07da16eb4a88
            polyjuice: e37553b9
            \`\`\``;
            core.info(`${integrationTestInfo}`);

            const comment = await github.rest.issues.createComment({
              issue_number: dispatch.issue.number,
              owner: dispatch.repo.owner,
              repo: dispatch.repo.repo,
              body: integrationTestInfo,
            });
            core.info(`comment ${JSON.stringify(comment.data, null, 2)}`);

            return comment.data.id;

      - name: Filter components use prebuilds
        id: filter_prebuilds_components
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const components_info = JSON.parse(`${{ steps.get_components.outputs.result }}`);
            const prebuilds = components_info.prebuilds;
            const components = components_info.components;
            core.info(`${ JSON.stringify(prebuilds, null, 2) }`)
            core.info(`${ JSON.stringify(components, null, 2) }`)

            for (const name in components) {
              const comp = components[name];
              if (comp.commit === undefined) {
                continue;
              }
              if (comp.usePrebuilds) {
                comp.commit = undefined;
              }
            }
            core.info(JSON.stringify(components));

            return {prebuilds, components};

      - name: Generate integration test inputs
        id: generate_integration_test_inputs
        uses: actions/github-script@v6
        with:
          script: |
            const components_info = JSON.parse(`${{ steps.filter_prebuilds_components.outputs.result }}`);
            const prebuilds = components_info.prebuilds;
            const components = components_info.components;

            const componentGitUrl = (comp) => {
              return `https://github.com/${comp.owner}/${comp.repo}`
            };

            let extraGithubENV = `\nGODWOKEN_PREBUILD_IMAGE_NAME=${prebuilds.image}:${prebuilds.tags[0]}`;
            if (components.kicker.commit) {
                extraGithubENV = `${extraGithubENV}\nGODWOKEN_KICKER_REF=${components.kicker.commit}`
            }
            if (components.tests.commit) {
                extraGithubENV = `${extraGithubENV}\nGODWOKEN_TESTS_REF=${components.tests.commit}`
            }
            if (components.godwoken.commit) {
                const gitUrl = componentGitUrl(components.godwoken);
                extraGithubENV = `${extraGithubENV}\nMANUAL_BUILD_GODWOKEN=true`
                extraGithubENV = `${extraGithubENV}\nGODWOKEN_GIT_URL=${gitUrl}`
                extraGithubENV = `${extraGithubENV}\nGODWOKEN_GIT_CHECKOUT=${components.godwoken.commit}`
            }
            if (components.scripts.commit) {
                const gitUrl = componentGitUrl(components.scripts);
                extraGithubENV = `${extraGithubENV}\nMANUAL_BUILD_SCRIPTS=true`
                extraGithubENV = `${extraGithubENV}\nSCRIPTS_GIT_URL=${gitUrl}`
                extraGithubENV = `${extraGithubENV}\nSCRIPTS_GIT_CHECKOUT=${components.scripts.commit}`
                extraGithubENV = `${extraGithubENV}\nOMNI_LOCK_GIT_URL=https://github.com/nervosnetwork/ckb-production-scripts`
                extraGithubENV = `${extraGithubENV}\nOMNI_LOCK_GIT_CHECKOUT=rc_lock`
            }
            if (components.polyjuice.commit) {
                const gitUrl = componentGitUrl(components.polyjuice);
                extraGithubENV = `${extraGithubENV}\nMANUAL_BUILD_POLYJUICE=true`
                extraGithubENV = `${extraGithubENV}\nPOLYJUICE_GIT_URL=${gitUrl}`
                extraGithubENV = `${extraGithubENV}\nPOLYJUICE_GIT_CHECKOUT=${components.polyjuice.commit}`
            }
            if (components.web3.commit) {
                const gitUrl = componentGitUrl(components.web3);
                extraGithubENV = `${extraGithubENV}\nMANUAL_BUILD_WEB3=true`
                extraGithubENV = `${extraGithubENV}\nMANUAL_BUILD_WEB3_INDEXER=true`
                extraGithubENV = `${extraGithubENV}\nWEB3_GIT_URL=${gitUrl}`
                extraGithubENV = `${extraGithubENV}\nWEB3_GIT_CHECKOUT=${components.web3.commit}`
            }
            core.info(`${extraGithubENV}`)

            return extraGithubENV;

      # Ref: https://github.community/t/set-output-truncates-multiline-strings/16852/9
      - name: Escape multiple lines test inputs
        id: escape_multiple_lines_test_inputs
        run: |
          inputs=${{ steps.generate_integration_test_inputs.outputs.result }}
          inputs="${inputs//'%'/'%25'}"
          inputs="${inputs//'\n'/'%0A'}"
          inputs="${inputs//'\r'/'%0D'}"
          echo "::set-output name=result::$inputs"

  run-integration-test:
    needs: component-info
    uses: godwokenrises/godwoken-tests/.github/workflows/reusable-integration-test-v1.yml@develop
    with:
      extra_github_env: |
        ${{ needs.component-info.outputs.extra_github_env }}

  run-result-feedback:
    needs: [component-info, run-integration-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      # Generate new token in case the tests run over an hour
      - name: Generate gw-bot token
        id: generate_gw_bot_token
        uses: wow-actions/use-app-token@v1
        with:
          app_id: ${{ secrets.GW_BOT_APP_ID }}
          private_key: ${{ secrets.GW_BOT_PRIVATE_KEY }}

      - name: Update comment about integration test result
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_gw_bot_token.outputs.token }}
          script: |
            const dispatch = JSON.parse(`${{ github.event.inputs.dispatch }}`);

            const comment_id = `${{ needs.component-info.outputs.comment_id }}`;
            core.info(`comment id ${comment_id}`);

            const comment = await github.rest.issues.getComment({
              owner: dispatch.repo.owner,
              repo: dispatch.repo.repo,
              comment_id,
            });

            const appendConclusion = `${comment.data.body}\n### Run Result\n**${{ needs.run-integration-test.result }}**`;
            const resp = await github.rest.issues.updateComment({
              owner: dispatch.repo.owner,
              repo: dispatch.repo.repo,
              comment_id,
              body: appendConclusion,
            });
            core.info(`${JSON.stringify(resp, null, 2)}`);
