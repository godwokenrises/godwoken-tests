const { ethers } = require("hardhat");
const { expect } = require("chai");

describe("CodeHash test cases", function () {
  // ethers.provider.on('debug', (info) => {
  //     console.log("begin ------------------")
  //     console.log("action:", info.action);
  //     console.log("request", info.request);
  //     console.log("response:",info.response);
  //     console.log("end ------------------")
  // });
  const CODE = "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a0914a3611610071578063a0914a3614610161578063b1c8321c1461017f578063c6230329146101b3578063cae74874146101d1578063e11111b6146101f3578063ea87963414610211576100b4565b80630d0567ae146100b95780630ff879fa146100d757806310795604146100f55780632b9ebc3b146100ff57806370907fab1461012157806376147d0814610143575b600080fd5b6100c161022f565b6040516100ce9190610aa5565b60405180910390f35b6100df610255565b6040516100ec9190610b87565b60405180910390f35b6100fd61025b565b005b6101076103c7565b604051610118959493929190610ac0565b60405180910390f35b610129610445565b60405161013a959493929190610ac0565b60405180910390f35b61014b610518565b6040516101589190610b1a565b60405180910390f35b610169610537565b6040516101769190610b35565b60405180910390f35b610199600480360381019061019491906108b3565b6105c5565b6040516101aa959493929190610ac0565b60405180910390f35b6101bb61065c565b6040516101c89190610b87565b60405180910390f35b6101d9610662565b6040516101ea959493929190610ba2565b60405180910390f35b6101fb61072e565b6040516102089190610b1a565b60405180910390f35b610219610734565b6040516102269190610b35565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b6102636103c7565b600160008060006002600060036000600460008a91905055899190505588919050908051906020019061029792919061076e565b5087919050558691906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050600054600560000181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600560020190805461036690610cfd565b6103719291906107f4565b506003546005600301819055506004546005600401819055507fef1805047aa43eafa087ab8005129b3913d5009272638959aec88a3d06af9666600160056040516103bd929190610b57565b60405180910390a1565b600080606060008030473073ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c3073ffffffffffffffffffffffffffffffffffffffff163b3073ffffffffffffffffffffffffffffffffffffffff163f945094509450945094509091929394565b6000806060600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600054600260035460045482805461048790610cfd565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390610cfd565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b50505050509250945094509450945094509091929394565b60003073ffffffffffffffffffffffffffffffffffffffff163f905090565b6002805461054490610cfd565b80601f016020809104026020016040519081016040528092919081815260200182805461057090610cfd565b80156105bd5780601f10610592576101008083540402835291602001916105bd565b820191906000526020600020905b8154815290600101906020018083116105a057829003601f168201915b505050505081565b6000806060600080858673ffffffffffffffffffffffffffffffffffffffff16318773ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c8873ffffffffffffffffffffffffffffffffffffffff163b8973ffffffffffffffffffffffffffffffffffffffff163f9450945094509450945091939590929450565b60035481565b60058060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805461069f90610cfd565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90610cfd565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b5050505050908060030154908060040154905085565b60045481565b60603073ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c905090565b82805461077a90610cfd565b90600052602060002090601f01602090048101928261079c57600085556107e3565b82601f106107b557805160ff19168380011785556107e3565b828001600101855582156107e3579182015b828111156107e25782518255916020019190600101906107c7565b5b5090506107f09190610881565b5090565b82805461080090610cfd565b90600052602060002090601f0160209004810192826108225760008555610870565b82601f106108335780548555610870565b8280016001018555821561087057600052602060002091601f016020900482015b8281111561086f578254825591600101919060010190610854565b5b50905061087d9190610881565b5090565b5b8082111561089a576000816000905550600101610882565b5090565b6000813590506108ad81610dcf565b92915050565b6000602082840312156108c9576108c8610dac565b5b60006108d78482850161089e565b91505092915050565b6108e981610c72565b82525050565b6108f881610c72565b82525050565b61090781610c84565b82525050565b61091681610c84565b82525050565b600061092782610c11565b6109318185610c2d565b9350610941818560208601610cca565b61094a81610db1565b840191505092915050565b6000815461096281610cfd565b61096c8186610c1c565b945060018216600081146109875760018114610999576109cc565b60ff19831686526020860193506109cc565b6109a285610bfc565b60005b838110156109c4578154818901526001820191506020810190506109a5565b808801955050505b50505092915050565b6109de81610cb8565b82525050565b600060a0830160008084015490506109fb81610d63565b610a086000870182610a87565b5060018401549050610a1981610d2f565b610a2660208701826108e0565b50600284018583036040870152610a3d8382610955565b92505060038401549050610a5081610d63565b610a5d6060870182610a87565b5060048401549050610a6e81610d49565b610a7b60808701826108fe565b50819250505092915050565b610a9081610cae565b82525050565b610a9f81610cae565b82525050565b6000602082019050610aba60008301846108ef565b92915050565b600060a082019050610ad560008301886108ef565b610ae26020830187610a96565b8181036040830152610af4818661091c565b9050610b036060830185610a96565b610b10608083018461090d565b9695505050505050565b6000602082019050610b2f600083018461090d565b92915050565b60006020820190508181036000830152610b4f818461091c565b905092915050565b6000604082019050610b6c60008301856109d5565b8181036020830152610b7e81846109e4565b90509392505050565b6000602082019050610b9c6000830184610a96565b92915050565b600060a082019050610bb76000830188610a96565b610bc460208301876108ef565b8181036040830152610bd6818661091c565b9050610be56060830185610a96565b610bf2608083018461090d565b9695505050505050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000610c7d82610c8e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610cc382610cae565b9050919050565b60005b83811015610ce8578082015181840152602081019050610ccd565b83811115610cf7576000848401525b50505050565b60006002820490506001821680610d1557607f821691505b60208210811415610d2957610d28610d7d565b5b50919050565b6000610d42610d3d83610dc2565b610c3e565b9050919050565b6000610d5c610d5783610dc2565b610c5e565b9050919050565b6000610d76610d7183610dc2565b610c68565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b610dd881610c72565b8114610de357600080fd5b5056fea26469706673582212204b1712ce7007257e2042da6de6a62304c0251b5dbc57e5745fa130109277581464736f6c63430008060033";
  const CODEHASH = "0xe9f977664bb368ab5c198ba3b70a329587dac06f91a8ae2e2ccdbc7f9e59728a"

  let contract1 = { address: "0x601E7D35478B1F73AEeFA083F9da4a67F724cc68" };
  let contract2 = { address: "" };
  let blockInfoContractFact;

  before(async function () {
    blockInfoContractFact = await ethers.getContractFactory("AddressContract");

    if (contract1.address) {
      contract1 = await ethers.getContractAt("AddressContract", contract1.address);
    } else {
      contract1 = await blockInfoContractFact.deploy({ value: 10000n });
      await contract1.deployed();
      console.log("deployed contract1 address:", contract1.address);
    }

    contract2 = await blockInfoContractFact.deploy({ value: 101n });
    await contract2.deployed();
    console.log("deployed contract2 address:", contract2.address);
  });

  it("Get codehash", async () => {
    const codehash1 = await contract1.getCodehash();
    expect(codehash1).to.be.equal(CODEHASH);

    const codehash2 = await contract2.getCodehash();
    expect(codehash2).to.be.equal(CODEHASH);
  });

  it("Get the contract code", async () => {
    const code = await contract1.getCode();
    expect(code.length).to.equal(CODE.length);

    // FIXME:
    return;
    expect(code).to.be.equal(CODE);
  });

  it("opcode - (query log for deploy)", async () => {
    let result = await contract2.deployTransaction.wait();
    expect(result.events[0].args.msg.latestBalance).to.be.equal(101n);
    expect(result.events[0].args.msg.latestAddress).to.be.equal(contract2.address);
    expect(result.events[0].args.msg.latestCode).to.be.equal("0x");
    expect(result.events[0].args.msg.latestCodeLength).to.be.equal(0n);

    return;
    // Only support getting codehash after the contract created.
    // AssertionError: expected latestCodeHash to equal CODEHASH
    expect(result.events[0].args[1].latestCodeHash).to.be.equal(CODEHASH);
  });

  it("opcode query(opcodeWithAddress) ", async () => {
    let result = await contract1.opcodeWithAddress();
    let code = await ethers.provider.getCode(contract1.address)
    expect(result[0]).to.be.equal(contract1.address)
    expect(result[1]).to.be.equal(10000n)
    expect(result[2]).to.be.equal(code)
    expect(result[4]).to.be.equal("0xc5a94d21b524783a20d29f69f58fb1e79791dd9145c027947fdb87fbb1e25826");
  });

  it("opcode - (ADDRESS,CODESIZE,EXTCODESIZE,SELFBALANCE) query on deploy", async () => {
    let tx = await contract1.setAddressMsg();
    let result = await tx.wait();
    expect(result.events[0].args[1].latestBalance).to.be.equal(10000n);
    expect(result.events[0].args[1].latestAddress).to.be.equal(contract1.address);
    expect(result.events[0].args[1].latestCode).to.not.be.contains(
      "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    expect(result.events[0].args[1].latestCodeLength).to.be.equal(3441n);
    expect(result.events[0].args[1].latestCodeHash).to.be.equal(
      "0xc5a94d21b524783a20d29f69f58fb1e79791dd9145c027947fdb87fbb1e25826");
  });

  // One must create an account on a Godwoken chain in order to use Polyjuice on
  // that Godwoken chain.
  // see: https://github.com/nervosnetwork/godwoken/blob/compatibility-breaking-changes/docs/known_caveats_of_polyjuice.md#account-creation
  // 
  // TODO: Godwoken v1.1 may support ineracting with an eth_address that hasn't 
  // been registered on Godwoken.
  //
  // see: Godwoken v1.1 Milestone
  it.skip("Interact with an eth_address that hasn't been registered on Godwoken"
    , async () => {
      // unregistered ETH Address
      const unregEthAddr = "0x7D360edE258e475c0737FB169f40Ed85dfaf8Fb5";
      let result = await contract1.getOtherAddress(unregEthAddr);
      expect(result[0]).to.be.equal(unregEthAddr);
      expect(result[1]).to.be.equal(0n)
      expect(result[2]).to.be.equal("0x")
      expect(result[3]).to.be.equal(0n)
      expect(result[4]).to.be.equal(
        "0x0000000000000000000000000000000000000000000000000000000000000000")
    });
})

/**
 * How to run this test?

> npx hardhat --network gw_devnet_v1 test test/codehash.js && \
  npx hardhat --network hardhat test test/codehash.js

> npx hardhat --network gw_devnet_v1 test test/codehash.js --grep "Get codehash" && \
  npx hardhat --network hardhat test test/codehash.js --grep "Get codehash"

> npx hardhat --network gw_devnet_v1 test test/codehash.js --grep "Get the contract code" && \
  npx hardhat --network hardhat test test/codehash.js --grep "Get the contract code"

> npx hardhat --network gw_devnet_v1 test test/codehash.js --grep "query log for deploy" && \
  npx hardhat test test/codehash.js --grep "query log for deploy"

> npx hardhat --network gw_devnet_v1 test test/codehash.js --grep "getOtherAddress" && \
  npx hardhat --network hardhat test test/codehash.js --grep "getOtherAddress"

 */
